/*
 * frmSDSevk.java
 *
 * Created on 25 Ekim 2007 Perþembe, 17:28
 */

package askan;

import askan.systems.*;
import java.util.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  Kerem
 */
public class frmSDSevk extends javax.swing.JFrame {
    
    public enum PLATE_RESULT {CUSTOMER, DELIVERY, MANUAL};
    
    private ArrayList
            customers,
            salesDocuments,
            materials,
            drivers;
    
    private Customer selectedCustomer;
    private SalesDocument selectedDelivery;
    private Material selectedMaterial;
    private String selectedPlate;
    private SalesProcess salesProcess;
    private Driver selectedDriver;
    
    private boolean 
            disableCustomerSelected,
            disableDeliverySelected,
            disableMaterialSelected,
            manualMode,
            salesProcessSaved;
    
    private PLATE_RESULT plateResult;
    
    private final String STATUS_TEXT_INITIAL = "Lütfen plakayý girip, SORGULA düðmesine basýn";
    
    /** Creates new form frmSDSevk */
    public frmSDSevk() {
        initComponents();
        btnManual.setVisible(Main.config.steelyardParam.amanu);
        
        ActionMap am;
        InputMap im;
        KeyStroke ks;        
        
        Action plateActionListener = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
              btnPlateActionPerformed(actionEvent);
            }
          };        
        am = btnPlate.getActionMap();
        im = btnPlate.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ks = KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0);
        im.put(ks, "plate");
        am.put("plate", plateActionListener);        
        
        Action saveActionListener = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
              btnSaveActionPerformed(actionEvent);
            }
          };        
        am = btnSave.getActionMap();
        im = btnSave.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ks = KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0);
        im.put(ks, "save");
        am.put("save", saveActionListener);    
        
        Action closeActionListener = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
              btnClose3ActionPerformed(actionEvent);
            }
          };        
        am = btnClose3.getActionMap();
        im = btnClose3.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ks = KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0);
        im.put(ks, "close");
        am.put("close", closeActionListener);         
        
        this.setTitle("Sevkiyat Ekraný");
        setStatus(STATUS_TEXT_INITIAL);
    }
    
    public void setStatus(String Status)
    {
        lblStatus.setText(Status);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbMaterial = new javax.swing.JComboBox();
        cmbCustomer = new javax.swing.JComboBox();
        cmbOrder = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        txtPlate = new javax.swing.JTextField();
        btnPlate = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        txtVrkme = new javax.swing.JTextField();
        btnManual = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cmbReceiver = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbDriver = new javax.swing.JComboBox();
        btnClose3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtNote = new javax.swing.JTextField();
        chkInspect = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel1.setText("Plaka");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel2.setText("Müþteri");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel3.setText("Malzeme");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel4.setText("Belge");

        cmbMaterial.setFont(new java.awt.Font("Tahoma", 0, 14));
        cmbMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMaterialActionPerformed(evt);
            }
        });

        cmbCustomer.setFont(new java.awt.Font("Tahoma", 0, 14));
        cmbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerActionPerformed(evt);
            }
        });

        cmbOrder.setFont(new java.awt.Font("Tahoma", 0, 14));
        cmbOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel5.setText("Miktar");

        txtQuantity.setEditable(false);
        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 14));

        txtPlate.setFont(new java.awt.Font("Tahoma", 0, 14));

        btnPlate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/askan/binaries/add_16.gif"))); // NOI18N
        btnPlate.setText("F1 - Seç");
        btnPlate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlateActionPerformed(evt);
            }
        });

        lblStatus.setText("...");
        lblStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/askan/binaries/save_16.gif"))); // NOI18N
        btnSave.setText("F11 - Kaydet");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtVrkme.setEditable(false);
        txtVrkme.setFont(new java.awt.Font("Tahoma", 0, 14));

        btnManual.setText("Serbest Giriþ");
        btnManual.setEnabled(false);
        btnManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManualActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel8.setText("Teslim Alan");

        cmbReceiver.setFont(new java.awt.Font("Tahoma", 0, 14));
        cmbReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbReceiverActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel9.setText("Adres");

        txtAddress.setEditable(false);
        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 14));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel6.setText("Þöför");

        cmbDriver.setFont(new java.awt.Font("Tahoma", 0, 14));

        btnClose3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/askan/binaries/delete_16.gif"))); // NOI18N
        btnClose3.setText("F12 - Kapat");
        btnClose3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClose3ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel10.setText("Notlar");

        txtNote.setEditable(false);
        txtNote.setFont(new java.awt.Font("Tahoma", 0, 14));

        chkInspect.setText("Ýncelensin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                            .addComponent(cmbDriver, javax.swing.GroupLayout.Alignment.TRAILING, 0, 364, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtNote, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkInspect)
                                .addGap(9, 9, 9))))
                    .addComponent(cmbReceiver, 0, 364, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVrkme, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbOrder, 0, 242, Short.MAX_VALUE)
                            .addComponent(txtPlate, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnManual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPlate, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cmbCustomer, javax.swing.GroupLayout.Alignment.TRAILING, 0, 364, Short.MAX_VALUE)
                    .addComponent(cmbMaterial, 0, 364, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(418, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnPlate)
                    .addComponent(txtPlate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnManual)
                    .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtVrkme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkInspect)
                        .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClose3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblStatus))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClose3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClose3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnClose3ActionPerformed

    private void cmbReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbReceiverActionPerformed
        int i = cmbReceiver.getSelectedIndex();
        if (i <= 0) {
            txtAddress.setText("(elle giriþ)");
            return;
        }
        
        Customer c = (Customer) selectedCustomer.receivers.get(cmbReceiver.getSelectedIndex() - 1);
        txtAddress.setText(c.address);
    }//GEN-LAST:event_cmbReceiverActionPerformed

    private void btnManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManualActionPerformed
       
        disableCustomerSelected = true;
        disableDeliverySelected = true;
        manualMode = true;
        plateResult = PLATE_RESULT.MANUAL;
        
        btnPlate.setEnabled(false);
        btnManual.setEnabled(false);
        txtPlate.setEnabled(true);
        txtPlate.setEditable(true);
        setManualCombobox(cmbOrder);
        setManualCombobox(cmbCustomer);
        setManualCombobox(cmbReceiver);
        setManualCombobox(cmbDriver);
        txtQuantity.setEnabled(true);
        txtQuantity.setEditable(true);
        txtVrkme.setEnabled(true);
        txtVrkme.setEditable(true);
        txtNote.setEditable(true);
        btnSave.setEnabled(false);
        
        customers = null;
        salesDocuments = null;
        selectedCustomer = null;
        selectedDelivery = null;
        
        paintCustomers(true, false);
        paintProducts();
    }//GEN-LAST:event_btnManualActionPerformed

    private void setManualCombobox(javax.swing.JComboBox C)
    {
        String temp = "";
        
        try
        {
            temp = C.getSelectedItem().toString();
        }
        catch(Exception ex)
        {
            temp = "";
        }
        
        C.removeAllItems();
        C.setEnabled(true);
        C.setEditable(true);
        C.addItem(temp);        
    }
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        btnSave.setEnabled(false);
        
        if (!salesProcessSaved)
        {
            salesProcess = new SalesProcess();
            if (!salesProcess.manualEntries) salesProcess.manualEntries = manualMode;
            salesProcess.id_kantar = Main.config.intParam.kantarID;
            salesProcess.material = selectedMaterial;
            salesProcess.passedDoor = true;
            salesProcess.passedEmpty = false;
            salesProcess.passedFull = false;
            salesProcess.trmtyp = Util.formatPlate(txtPlate.getText());
            salesProcess.sevkNote = txtNote.getText();
            salesProcess.inspect = chkInspect.isSelected();

            if (manualMode)
            {
                salesProcess.salesDocument = null;
                salesProcess.vbelnManual = cmbOrder.getSelectedItem().toString();                     
                
                if (cmbCustomer.getSelectedIndex() <= 0)
                {
                    salesProcess.customer = null;
                    salesProcess.kunnrManual = cmbCustomer.getSelectedItem().toString();
                }
                else
                {
                    try
                    {
                        salesProcess.customer = new Customer();
                        salesProcess.customer = (Customer) customers.get(cmbCustomer.getSelectedIndex() - 1);
                    }
                    catch(Exception ex)
                    {
                        Main.appendLog("Müþteri seçim hatasý: " + ex.toString());
                        salesProcess.customer = null;
                        salesProcess.kunnrManual = cmbCustomer.getSelectedItem().toString();                        
                    }
                }
            }
            else
            {
                if (selectedMaterial == null)
                {
                    salesProcess.salesDocument = new SalesDocument();
                }
                else
                {
                    salesProcess.salesDocument = selectedDelivery;
                }       

                if (plateResult == PLATE_RESULT.CUSTOMER)
                {
                    salesProcess.customer = selectedCustomer;         
                }
                else 
                {
                    salesProcess.salesDocument = selectedDelivery;
                    salesProcess.customer = salesProcess.salesDocument.custOwner;            
                }          
                
            }
            
            if (cmbDriver.getSelectedIndex() > 0)
            {
                salesProcess.driver = (Driver) drivers.get(cmbDriver.getSelectedIndex() - 1);
            }
            else
            {
                salesProcess.driver = null;
                salesProcess.sofidManual = cmbDriver.getSelectedItem().toString();
                salesProcess.manualEntries = true;
            }     
            
            if (cmbReceiver.getSelectedIndex() > 0)
            {
                salesProcess.receiver = (Customer) selectedCustomer.receivers.get(cmbReceiver.getSelectedIndex() - 1);
            }
            else
            {
                cmbReceiver.setEditable(false);
                salesProcess.receiver = null;
                salesProcess.kunweManual = cmbReceiver.getSelectedItem().toString();
                salesProcess.manualEntries = true;
            }       
            
            if (salesProcess.salesDocument == null)
            {
                try
                {
                    salesProcess.lfimg.setWeight(txtQuantity.getText(), txtVrkme.getText());
                }
                catch(Exception ex)
                {
                    setStatus("Lütfen miktar alanýný düzeltin");
                    btnSave.setEnabled(true);
                    return;
                }                    
            }
            else
            {
                SalesDocumentItem sdi = (SalesDocumentItem) salesProcess.salesDocument.getItem(salesProcess.material.matnr);
                salesProcess.lfimg.setWeight(sdi.lfimg, sdi.vrkme);
            }

            try
            {
                btnSave.setEnabled(false);
                Main.sql.connect();
                salesProcess.insert();
                setStatus("Giriþ kaydedildi");

                txtPlate.setEditable(false);
                btnPlate.setEnabled(false);
                cmbOrder.setEnabled(false);
                btnManual.setEnabled(false);
                cmbCustomer.setEnabled(false);
                cmbMaterial.setEnabled(false);
                txtQuantity.setEditable(false);
                txtVrkme.setEditable(false);
                cmbReceiver.setEnabled(false);
                cmbDriver.setEnabled(false);
                txtNote.setEditable(false);
                chkInspect.setEnabled(false);
                salesProcessSaved = true;
            }
            catch(Exception ex)
            {
                setStatus("Kayýt sýrasýnda bir hata oluþtu");
                Main.appendLog("Sevkiyat giriþi kaydedilirken bir hata oluþtu: " + ex.toString());
                btnSave.setEnabled(true);
                return;
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderActionPerformed
        if (disableDeliverySelected) return;
        
        if (cmbOrder.getSelectedIndex() <= 0)
        {
            selectedDelivery = null;
        }
        else
        {
            selectedDelivery = (SalesDocument) salesDocuments.get(cmbOrder.getSelectedIndex() - 1);
        }
        controlDelivery();
    }//GEN-LAST:event_cmbOrderActionPerformed

    private void cmbMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMaterialActionPerformed
        if (disableMaterialSelected) return;
        if (cmbMaterial.getSelectedIndex() <= 0) 
        {
            selectedMaterial = null;
        }
        else
        {
            selectedMaterial = (Material) materials.get(cmbMaterial.getSelectedIndex() - 1);
            
            if (selectedMaterial.division == null)
            {
                setStatus("Bu malzemeye ait bölüm belirlenmemiþ");
                return;
            }
        }
        controlMaterial();
    }//GEN-LAST:event_cmbMaterialActionPerformed

    private void controlMaterial()
    {
        if (selectedMaterial == null) 
        {
            txtQuantity.setText("");
            txtQuantity.setEditable(false);
            controlCustomer(true);
        }
        else
        {
            if (plateResult == PLATE_RESULT.CUSTOMER)
            {
                txtQuantity.setEditable(true);      
                txtVrkme.setText(Material.getUOMText(Material.getUOM(selectedMaterial.meins)));
                setStatus("Lütfen miktarý girin ve KAYDET düðmesine týklayýn");  
                btnSave.setEnabled(true);
            }
            else if (plateResult == PLATE_RESULT.DELIVERY)
            {
                txtQuantity.setEditable(false);
                SalesDocumentItem di = selectedDelivery.getItem(selectedMaterial.matnr);
                if (di != null)
                {
                    txtQuantity.setText(String.valueOf(di.lfimg));
                    txtVrkme.setText(di.vrkme);
                    btnSave.setEnabled(true);
                    setStatus("Alanlarý tamamladýktan sonra giriþi kaydedebilirsiniz");
                }
                else
                {
                    txtQuantity.setText("");
                    setStatus("Kalem tespit edilirken teknik bir hata oldu");
                }
            }
            else
            {
                btnSave.setEnabled(true);
                setStatus("Giriþi kaydedebilirsiniz");                
            }
        }
    }
    
    private void controlDelivery()
    {
        cmbMaterial.removeAllItems();
        if (selectedDelivery == null)
        {
            // Nothing
        }
        else
        {
            disableCustomerSelected = true;
            disableMaterialSelected = true;
            
            cmbCustomer.removeAllItems();
            selectedCustomer = selectedDelivery.custOwner;
            paintCustomer(selectedCustomer);
            paintReceivers();
            
            paintMaterialsOfSelectedDelivery();
            
            disableCustomerSelected = false;
            disableMaterialSelected = false;            
        }
    }
    
    private void paintMaterialsOfSelectedDelivery()
    {
        disableMaterialSelected = true;
        
        cmbMaterial.removeAllItems();
        if (selectedDelivery.items.size() == 1)
        {
            SalesDocumentItem di = (SalesDocumentItem) selectedDelivery.items.get(0);
            selectedMaterial = di.material;
            paintMaterial(selectedMaterial);
            controlMaterial();
        }
        else
        {
            materials = new ArrayList();
            for (int n = 0; n < selectedDelivery.items.size(); n++)
            {
                SalesDocumentItem di = (SalesDocumentItem) selectedDelivery.items.get(n);
                materials.add(di.material);
            }
            paintMaterials();  
        }        
              
        disableMaterialSelected = false;
    }
    
    private void cmbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerActionPerformed
        if (disableCustomerSelected) return;
        if (cmbCustomer.getSelectedIndex() <= 0)
        {
            selectedCustomer = null;
        }
        else
        {
            selectedCustomer = (Customer) customers.get(cmbCustomer.getSelectedIndex() - 1);
        }
        
        controlCustomer(true);
    }//GEN-LAST:event_cmbCustomerActionPerformed

    private void btnPlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlateActionPerformed
        btnManual.setEnabled(true);
        queryPlate();
    }//GEN-LAST:event_btnPlateActionPerformed
    
    private void queryPlate()
    {
        selectedPlate = Util.formatPlate(txtPlate.getText());
        
        if (!connectToSql()) return;
        
        txtPlate.setEditable(false);
        btnPlate.setEnabled(false);
        setStatus("Plaka sorgulanýyor...");
        
        // Bu plaka için aktif bir giriþ var mý?
        try
        {
            if (Vehicle.isVehicleInPlant(selectedPlate))
            {
                if (askan.systems.Util.confirmStep(this, "Bu araç tesise girmiþ gözüküyor! \nEðer devam ederseniz, eski giriþ kaydý iptal edilecektir.")) 
                {
                    try
                    {
                        SalesProcess.cancelActiveSalesProcesses(selectedPlate);
                    }
                    catch(Exception ex)
                    {
                        setStatus("Ýptal sýrasýnda bir hata oluþtu");
                        Main.appendLog(selectedPlate + " plakasýna ait eski kayýtlar iptal edilirken bir hata oluþtu: " + ex.toString());
                        arrangeFormBeforeQueryPlateExit();
                        return;
                    }
                }
                else
                {
                    arrangeFormBeforeQueryPlateExit();
                    return;
                }
            }
        }
        catch(Exception ex)
        {
            Main.appendLog("Mükerrer plaka giriþi kontrolünde bir hata oluþtu: " + ex.toString());
        }
        
        
        // Belgelerde plaka arayalým
        salesDocuments = SalesDocument.getDocumentsOfPlate(txtPlate.getText());
        
        // Belgelerde plaka bulamadýysak, müþterilerde arayacaðýz
        if (salesDocuments.size() <= 0)
        {
            customers = Customer.getCustomersOfPlate(txtPlate.getText());
            
            if (customers.size() <= 0)
            {
                setStatus("Plakaya karþýlýk belge / müþteri bulunamadý");      
                txtPlate.setEditable(true);
                btnPlate.setEnabled(true);                    
            }
            else
            {
                plateResult = PLATE_RESULT.CUSTOMER;
                paintCustomers();
            }
        }
        else
        {
            plateResult = PLATE_RESULT.DELIVERY;
            paintDeliveries();
        }
        
        paintDrivers(); 
        txtNote.setEditable(true);
    }
    
    private void arrangeFormBeforeQueryPlateExit()
    {
        setStatus(STATUS_TEXT_INITIAL);
        txtPlate.setEditable(true);
        btnPlate.setEnabled(true);
        btnManual.setEnabled(false);        
    }
    
    private void paintCustomers()
    {
        paintCustomers(false, true);
    }
    
    private void paintCustomers(boolean SelectAllBeforePaint, boolean EnableSelectedAfterwards)
    {
        disableCustomerSelected = true;
        cmbCustomer.removeAllItems();
        
        if (SelectAllBeforePaint)
        {
            connectToSql();
            customers = Customer.getCustomers(null);
        }
        
        if (customers.size() > 1) 
        {
            cmbCustomer.addItem("--Müþteri Seçin--");
            cmbCustomer.setSelectedIndex(0);
        }
        for (int n = 0; n < customers.size(); n++) 
        {
            Customer cust = (Customer) customers.get(n);
            paintCustomer(cust);
        }

        if (customers.size() > 1) 
        {
            setStatus("Lütfen ilgili müþteriyi seçin");
        }
        else
        {
            selectedCustomer = (Customer) customers.get(0);
            controlCustomer(true);
        }
        if (EnableSelectedAfterwards) disableCustomerSelected = false;        
    }
    
    private void paintDeliveries()
    {
        cmbOrder.removeAllItems();
        if (salesDocuments.size() == 1)
        {
            disableDeliverySelected = true;
            cmbOrder.removeAllItems();
            selectedDelivery = (SalesDocument) salesDocuments.get(0);
            paintDelivery(selectedDelivery);
            disableDeliverySelected = false;

            disableMaterialSelected = true;
            paintMaterialsOfSelectedDelivery();
            disableMaterialSelected = false;            
            
            disableCustomerSelected = true;
            selectedCustomer = selectedDelivery.custOwner;
            controlCustomer(false);
            paintCustomer(selectedCustomer);
            paintReceivers();
            disableCustomerSelected = false;
        }
        else
        {
            if (plateResult == PLATE_RESULT.CUSTOMER)
            {
                customers = SalesDocument.getDeliveryCustomersOfPlate(txtPlate.getText());
                paintCustomers();
            }
            else
            {
                disableDeliverySelected = true;
                cmbOrder.addItem("-- Lütfen belge seçin --");
                for (int n = 0; n < salesDocuments.size(); n++)
                {
                    SalesDocument d = (SalesDocument) salesDocuments.get(n);
                    paintDelivery(d);
                }
                disableDeliverySelected = false;
                setStatus("Lütfen ilgili belgeyi seçin");
            }
        }        
    }
    
    private void paintDelivery(SalesDocument D)
    {
        cmbOrder.addItem(D.vbeln + " - " + D.custOwner.name1);
    }
    
    private void paintCustomer(Customer C)
    {
        cmbCustomer.addItem(C.getDisplayText());
    }
    
    private void paintProducts()
    {
        connectToSql();
        materials = Material.getProducts("SPART");
        paintMaterials();        
    }
    
    private void controlCustomer(boolean MakeGuiChanges)
    {
        if (MakeGuiChanges) cmbMaterial.removeAllItems();
        if (selectedCustomer == null) 
        {
            setStatus("Lütfen ilgili müþteriyi seçin");
            return;
        }
        
        if (selectedCustomer.isBlocked)
        {
            setStatus("Seçmiþ olduðunuz müþteri blokajlý");
            btnSave.setEnabled(false);
        }
        else if (selectedCustomer.hasBadCredit)
        {
            setStatus("Seçmiþ olduðunuz müþterinin kredi limiti bitmiþ");
            btnSave.setEnabled(false);
        }
        else
        {
            if (!MakeGuiChanges) return;
            if (plateResult == PLATE_RESULT.CUSTOMER)
            {
                paintReceivers();
                paintProducts();
            }
            else
            {
                if (selectedDelivery == null)
                {
                    disableDeliverySelected = true;
                    if (!connectToSql()) return;
                    setStatus("Lütfen ilgili belgeyi seçin");
                    salesDocuments = SalesDocument.getDeliveriesOfPlate(txtPlate.getText(), selectedCustomer.kunnr);
                    paintDeliveries();
                    disableDeliverySelected = false;
                }
            }
        }
    }
    
    private void paintMaterials()
    {
        disableMaterialSelected = true;  
        cmbMaterial.removeAllItems();
        if (!connectToSql()) return;
        setStatus("Lütfen ilgili malzemeyi seçin");
        cmbMaterial.addItem("--Malzeme Seçin--");
        for (int n = 0; n < materials.size(); n++) 
        {
            Material m = (Material) materials.get(n);
            paintMaterial(m);
        }
        disableMaterialSelected = false;      
    }
    
    private void paintMaterial(Material M)
    {
        cmbMaterial.addItem(M.getDisplayText());
    }
    
    private void paintReceivers()
    {
        cmbReceiver.removeAllItems();
        if (selectedCustomer != null)
        {
            if (selectedCustomer.receivers.size() <= 0)
            {
               cmbReceiver.addItem("(Kontrol edin) " + selectedCustomer.name1 + " " + selectedCustomer.address);
            }
            else
            {
                cmbReceiver.addItem("-- Lütfen Alýcý Seçin veya Yazýn--");
                for (int n = 0; n < selectedCustomer.receivers.size(); n++)
                {
                    Customer c = (Customer) selectedCustomer.receivers.get(n);
                    cmbReceiver.addItem(c.getDisplayText());
                }
                
                if (selectedCustomer.receivers.size() == 1)
                {
                    cmbReceiver.setSelectedIndex(1);
                }
                
                if (selectedCustomer.receivers.size() > 1)
                {
                    if (selectedDelivery != null && selectedMaterial != null)
                    {
                        Customer rec = selectedDelivery.getReceiver(selectedMaterial.matnr);
                        if (rec != null)
                        {
                            for (int n = 0; n < selectedCustomer.receivers.size(); n++)
                            {
                                Customer rec2 = (Customer) selectedCustomer.receivers.get(n);
                                if (rec2.kunnr.equals(rec.kunnr)) cmbReceiver.setSelectedIndex(n + 1);
                            }
                        }
                    }
                }
            }
        }
        else
        {
            cmbReceiver.addItem(selectedCustomer.getDisplayText() + " (adresi yazýn)");
            salesProcess.manualEntries = true;
        }
        cmbReceiver.setEditable(true);             
    }
    
    private void paintDrivers()
    {
        connectToSql();
        drivers = new ArrayList();
        try
        {
            cmbDriver.setEditable(true);
            cmbDriver.removeAllItems();
            cmbDriver.addItem("-- Lütfen Þöför Seçin veya Yazýn--");
            drivers = Driver.getDriversOfVehicle(selectedPlate);
            for (int n = 0; n < drivers.size(); n++)
            {
                Driver d = (Driver) drivers.get(n);
                cmbDriver.addItem(d.getDisplayText());
            }
            
            if (drivers.size() == 1) cmbDriver.setSelectedIndex(1);
        }
        catch(Exception ex)
        {
            Main.appendLog("Þöförler çekilemedi: " + ex.toString());
        }
        cmbDriver.setEditable(true);        
    }
    
    private boolean connectToSql()
    {
        try
        {
            Main.sql.connect();
            return true;
        }
        catch(Exception ex)
        {
            Main.appendLog("SQL baðlantý hatasý: " + ex.toString());
            setStatus("SQL baðlantý hatasý");
            return false;
        }        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmSDSevk().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose3;
    private javax.swing.JButton btnManual;
    private javax.swing.JButton btnPlate;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkInspect;
    private javax.swing.JComboBox cmbCustomer;
    private javax.swing.JComboBox cmbDriver;
    private javax.swing.JComboBox cmbMaterial;
    private javax.swing.JComboBox cmbOrder;
    private javax.swing.JComboBox cmbReceiver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtNote;
    private javax.swing.JTextField txtPlate;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtVrkme;
    // End of variables declaration//GEN-END:variables
    
}
